name: snowflake-devops-demo

# Controls when the action will run. 
on:
  push:
    branches:
      - main
    paths:
      - 'migrations/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy-snowflake-changes-job:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Use Python 3.8.x
        uses: actions/setup-python@v2.2.1
        with:
          python-version: 3.8.x

      - name: Run schemachange
        env:
          SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
          SF_ROLE: ${{ secrets.SF_ROLE }}
          SF_WAREHOUSE: ${{ secrets.SF_WAREHOUSE }}
          SF_DATABASE: ${{ secrets.SF_DATABASE }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }}
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          python --version
          echo "Step 1: Installing schemachange"
          pip install schemachange
        
          echo "Step 4: Running schemachange"
          schemachange -f $GITHUB_WORKSPACE/migrations -a $SF_ACCOUNT -u $SF_USERNAME -r $SF_ROLE -w $SF_WAREHOUSE -d $SF_DATABASE -c $SF_DATABASE.SCHEMACHANGE.CHANGE_HISTORY --create-change-history-table



      - name: Install SnowSQL
        run: |
          sudo apt update
          sudo apt install pipx
          pipx ensurepath
          echo "install snow sql"
          pipx install snowflake-cli-labs
          echo " installation succed"


      - name: Check if this is a git revert commit
        id: git-revert-check
        run: |
          LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Last commit message: $LAST_COMMIT_MESSAGE"
          
          # Check if the commit message contains the word 'revert'
          if [[ "$LAST_COMMIT_MESSAGE" == *"Revert"* ]]; then
            echo "This is a revert commit."
            echo "::set-output name=is-revert::true"
          else
            echo "This is not a revert commit."
            echo "::set-output name=is-revert::false"
          fi

    
      # Step 4: Verification step - Execute verification script
      - name: Verify Schema Changes
        if: steps.git-revert-check.outputs.is-revert == 'false'
        env:
          SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
          SF_ROLE: ${{ secrets.SF_ROLE }}
          SF_WAREHOUSE: ${{ secrets.SF_WAREHOUSE }}
          SF_DATABASE: ${{ secrets.SF_DATABASE }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }}
        run: | 
          echo "Step 4: Executing verification script"
          snow sql --filename $GITHUB_WORKSPACE/verify/script.sql -x --account=$SF_ACCOUNT --user=$SF_USERNAME --password=$SNOWFLAKE_PASSWORD --role=$SF_ROLE --warehouse=$SF_WAREHOUSE --database=$SF_DATABASE
          VERIFY_RESULT=$?
          
          if [ $VERIFY_RESULT -ne 0 ]; then
            echo "Verification failed. Rolling back..."
            exit 1
          fi
          echo "Schema changes verified successfully."

      - name: Run rollback if this is a git revert
        if: steps.git-revert-check.outputs.is-revert == 'true'
        env:
          SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
          SF_ROLE: ${{ secrets.SF_ROLE }}
          SF_WAREHOUSE: ${{ secrets.SF_WAREHOUSE }}
          SF_DATABASE: ${{ secrets.SF_DATABASE }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }}
        run: |
          echo "Running rollback for revert"
          snow sql --filename $GITHUB_WORKSPACE/revert/script.sql -x --account=$SF_ACCOUNT --user=$SF_USERNAME --password=$SNOWFLAKE_PASSWORD --role=$SF_ROLE --warehouse=$SF_WAREHOUSE --database=$SF_DATABASE